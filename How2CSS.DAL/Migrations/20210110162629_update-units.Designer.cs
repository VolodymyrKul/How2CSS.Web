// <auto-generated />
using System;
using How2CSS.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace How2CSS.DAL.Migrations
{
    [DbContext(typeof(How2CSSDbContext))]
    [Migration("20210110162629_update-units")]
    partial class updateunits
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("How2CSS.Core.Models.AchievementData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_AchievementData");

                    b.Property<int>("CompletedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorrectCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentMark")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUserAchievement")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TryCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("XPKAchievementData");

                    b.HasIndex("IdUserAchievement");

                    b.ToTable("AchievementDatas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompletedCount = 15,
                            CorrectCount = 12,
                            CurrentMark = 24,
                            IdUserAchievement = 1,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 2,
                            CompletedCount = 18,
                            CorrectCount = 15,
                            CurrentMark = 30,
                            IdUserAchievement = 1,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 3,
                            CompletedCount = 21,
                            CorrectCount = 18,
                            CurrentMark = 36,
                            IdUserAchievement = 1,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 4,
                            CompletedCount = 17,
                            CorrectCount = 14,
                            CurrentMark = 28,
                            IdUserAchievement = 2,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 5,
                            CompletedCount = 20,
                            CorrectCount = 17,
                            CurrentMark = 34,
                            IdUserAchievement = 2,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 6,
                            CompletedCount = 23,
                            CorrectCount = 20,
                            CurrentMark = 40,
                            IdUserAchievement = 2,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 7,
                            CompletedCount = 19,
                            CorrectCount = 16,
                            CurrentMark = 32,
                            IdUserAchievement = 3,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 8,
                            CompletedCount = 22,
                            CorrectCount = 19,
                            CurrentMark = 38,
                            IdUserAchievement = 3,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 9,
                            CompletedCount = 25,
                            CorrectCount = 22,
                            CurrentMark = 44,
                            IdUserAchievement = 3,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 10,
                            CompletedCount = 21,
                            CorrectCount = 18,
                            CurrentMark = 36,
                            IdUserAchievement = 4,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 11,
                            CompletedCount = 24,
                            CorrectCount = 21,
                            CurrentMark = 42,
                            IdUserAchievement = 4,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 12,
                            CompletedCount = 27,
                            CorrectCount = 24,
                            CurrentMark = 48,
                            IdUserAchievement = 4,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 13,
                            CompletedCount = 23,
                            CorrectCount = 20,
                            CurrentMark = 40,
                            IdUserAchievement = 5,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 14,
                            CompletedCount = 26,
                            CorrectCount = 23,
                            CurrentMark = 46,
                            IdUserAchievement = 5,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 15,
                            CompletedCount = 29,
                            CorrectCount = 26,
                            CurrentMark = 52,
                            IdUserAchievement = 5,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 16,
                            CompletedCount = 16,
                            CorrectCount = 11,
                            CurrentMark = 22,
                            IdUserAchievement = 6,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 17,
                            CompletedCount = 19,
                            CorrectCount = 14,
                            CurrentMark = 28,
                            IdUserAchievement = 6,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 18,
                            CompletedCount = 22,
                            CorrectCount = 17,
                            CurrentMark = 34,
                            IdUserAchievement = 6,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 19,
                            CompletedCount = 18,
                            CorrectCount = 13,
                            CurrentMark = 26,
                            IdUserAchievement = 7,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 20,
                            CompletedCount = 21,
                            CorrectCount = 16,
                            CurrentMark = 32,
                            IdUserAchievement = 7,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 21,
                            CompletedCount = 24,
                            CorrectCount = 19,
                            CurrentMark = 38,
                            IdUserAchievement = 7,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 22,
                            CompletedCount = 20,
                            CorrectCount = 15,
                            CurrentMark = 30,
                            IdUserAchievement = 8,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 23,
                            CompletedCount = 23,
                            CorrectCount = 18,
                            CurrentMark = 36,
                            IdUserAchievement = 8,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 24,
                            CompletedCount = 26,
                            CorrectCount = 21,
                            CurrentMark = 42,
                            IdUserAchievement = 8,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 25,
                            CompletedCount = 22,
                            CorrectCount = 17,
                            CurrentMark = 34,
                            IdUserAchievement = 9,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 26,
                            CompletedCount = 25,
                            CorrectCount = 20,
                            CurrentMark = 40,
                            IdUserAchievement = 9,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 27,
                            CompletedCount = 28,
                            CorrectCount = 23,
                            CurrentMark = 46,
                            IdUserAchievement = 9,
                            TryCount = 3
                        },
                        new
                        {
                            Id = 28,
                            CompletedCount = 24,
                            CorrectCount = 19,
                            CurrentMark = 38,
                            IdUserAchievement = 10,
                            TryCount = 1
                        },
                        new
                        {
                            Id = 29,
                            CompletedCount = 27,
                            CorrectCount = 22,
                            CurrentMark = 44,
                            IdUserAchievement = 10,
                            TryCount = 2
                        },
                        new
                        {
                            Id = 30,
                            CompletedCount = 30,
                            CorrectCount = 25,
                            CurrentMark = 50,
                            IdUserAchievement = 10,
                            TryCount = 3
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Answer");

                    b.Property<string>("EtalonAnswer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKAnswer");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EtalonAnswer = "CSS"
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.CSSTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Task");

                    b.Property<int>("IdAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdMetadata")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskDifficulty")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("XPKTask");

                    b.HasIndex("IdAnswer");

                    b.HasIndex("IdMetadata");

                    b.HasIndex("IdQuestion");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdAnswer = 1,
                            IdMetadata = 1,
                            IdQuestion = 1,
                            TaskDifficulty = 0
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.Hint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Hint");

                    b.Property<string>("HintText")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("HintType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdTask")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("XPKHint");

                    b.HasIndex("IdTask");

                    b.ToTable("Hints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HintText = "CSS",
                            HintType = "CSS",
                            IdTask = 1
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Level");

                    b.Property<int>("LevelDifficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TasksCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKLevel");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("How2CSS.Core.Models.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Metadata");

                    b.HasKey("Id")
                        .HasName("XPKMetadata");

                    b.ToTable("Metadatas");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Question");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKQuestion");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "CSS"
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Tag");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKTag");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CSS"
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.TagDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_TagDistribution");

                    b.Property<int>("IdMetadata")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTag")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("XPKTagDistribution");

                    b.HasIndex("IdMetadata");

                    b.HasIndex("IdTag");

                    b.ToTable("TagDistributions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdMetadata = 1,
                            IdTag = 1
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.TaskDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_TaskDistribution");

                    b.Property<int>("IdLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTask")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("XPKTaskDistribution");

                    b.HasIndex("IdLevel");

                    b.HasIndex("IdTask");

                    b.ToTable("TaskDistributions");
                });

            modelBuilder.Entity("How2CSS.Core.Models.TaskResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_TaskResult");

                    b.Property<long>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTask")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAnswer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKTaskResult");

                    b.HasIndex("IdTask");

                    b.HasIndex("IdUser");

                    b.ToTable("TaskResults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 10000L,
                            IdTask = 1,
                            IdUser = 1,
                            ResultDate = new DateTime(2000, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Score = 25,
                            UserAnswer = "CSS"
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Unit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKUnit");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CSS"
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.UnitDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_UnitDistribution");

                    b.Property<int>("IdMetadata")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUnit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("XPKUnitDistribution");

                    b.HasIndex("IdMetadata");

                    b.HasIndex("IdUnit");

                    b.ToTable("UnitDistributions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdMetadata = 1,
                            IdUnit = 1
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_User");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKUser");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ilivocs@gmail.com",
                            FirstName = "Oksana",
                            LastName = "Iliv",
                            Password = "_Aa123456",
                            Phone = "0123456789",
                            Role = "User"
                        },
                        new
                        {
                            Id = 2,
                            Email = "turyanmykh@gmail.com",
                            FirstName = "Mykhailo",
                            LastName = "Turianskyi",
                            Password = "_Aa123456",
                            Phone = "1234567890",
                            Role = "User"
                        },
                        new
                        {
                            Id = 3,
                            Email = "stasenoleks@gmail.com",
                            FirstName = "Oleksandr",
                            LastName = "Stasenko",
                            Password = "_Aa123456",
                            Phone = "2345678901",
                            Role = "User"
                        },
                        new
                        {
                            Id = 4,
                            Email = "pynzynyura@gmail.com",
                            FirstName = "Yurii",
                            LastName = "Pynzyn",
                            Password = "_Aa123456",
                            Phone = "3456789012",
                            Role = "User"
                        },
                        new
                        {
                            Id = 5,
                            Email = "hladyoandr@gmail.com",
                            FirstName = "Andrii",
                            LastName = "Hlado",
                            Password = "_Aa123456",
                            Phone = "4567890123",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.UserAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_UserAchievement");

                    b.Property<int>("IdLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SaveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKUserAchievement");

                    b.HasIndex("IdLevel");

                    b.HasIndex("IdUser");

                    b.ToTable("UserAchievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdLevel = 1,
                            IdUser = 1,
                            Notes = "Need to learn margin",
                            SaveDate = new DateTime(2020, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task1 Achivement"
                        },
                        new
                        {
                            Id = 2,
                            IdLevel = 2,
                            IdUser = 1,
                            Notes = "Need to learn padding",
                            SaveDate = new DateTime(2020, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task2 Achivement"
                        },
                        new
                        {
                            Id = 3,
                            IdLevel = 3,
                            IdUser = 1,
                            Notes = "Need to learn border",
                            SaveDate = new DateTime(2020, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task3 Achivement"
                        },
                        new
                        {
                            Id = 4,
                            IdLevel = 4,
                            IdUser = 1,
                            Notes = "Need to learn links",
                            SaveDate = new DateTime(2020, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task4 Achivement"
                        },
                        new
                        {
                            Id = 5,
                            IdLevel = 5,
                            IdUser = 1,
                            Notes = "Need to learn tables",
                            SaveDate = new DateTime(2020, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task5 Achivement"
                        },
                        new
                        {
                            Id = 6,
                            IdLevel = 1,
                            IdUser = 2,
                            Notes = "Need to learn position",
                            SaveDate = new DateTime(2020, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task1 Achivement"
                        },
                        new
                        {
                            Id = 7,
                            IdLevel = 2,
                            IdUser = 2,
                            Notes = "Need to learn float",
                            SaveDate = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task2 Achivement"
                        },
                        new
                        {
                            Id = 8,
                            IdLevel = 3,
                            IdUser = 2,
                            Notes = "Need to learn align",
                            SaveDate = new DateTime(2020, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task3 Achivement"
                        },
                        new
                        {
                            Id = 9,
                            IdLevel = 4,
                            IdUser = 2,
                            Notes = "Need to learn opacity",
                            SaveDate = new DateTime(2020, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task4 Achivement"
                        },
                        new
                        {
                            Id = 10,
                            IdLevel = 5,
                            IdUser = 2,
                            Notes = "Need to learn forms",
                            SaveDate = new DateTime(2020, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Task5 Achivement"
                        });
                });

            modelBuilder.Entity("How2CSS.Core.Models.AchievementData", b =>
                {
                    b.HasOne("How2CSS.Core.Models.UserAchievement", "IdUserAchievementNavigation")
                        .WithMany("AchievementDatas")
                        .HasForeignKey("IdUserAchievement")
                        .HasConstraintName("R_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUserAchievementNavigation");
                });

            modelBuilder.Entity("How2CSS.Core.Models.CSSTask", b =>
                {
                    b.HasOne("How2CSS.Core.Models.Answer", "IdAnswerNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IdAnswer")
                        .HasConstraintName("R_9")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("How2CSS.Core.Models.Metadata", "IdMetadataNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IdMetadata")
                        .HasConstraintName("R_11")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("How2CSS.Core.Models.Question", "IdQuestionNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IdQuestion")
                        .HasConstraintName("R_10")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAnswerNavigation");

                    b.Navigation("IdMetadataNavigation");

                    b.Navigation("IdQuestionNavigation");
                });

            modelBuilder.Entity("How2CSS.Core.Models.Hint", b =>
                {
                    b.HasOne("How2CSS.Core.Models.CSSTask", "IdTaskNavigation")
                        .WithMany("Hints")
                        .HasForeignKey("IdTask")
                        .HasConstraintName("R_8")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdTaskNavigation");
                });

            modelBuilder.Entity("How2CSS.Core.Models.TagDistribution", b =>
                {
                    b.HasOne("How2CSS.Core.Models.Metadata", "IdMetadataNavigation")
                        .WithMany("TagDistributions")
                        .HasForeignKey("IdMetadata")
                        .HasConstraintName("R_5")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("How2CSS.Core.Models.Tag", "IdTagNavigation")
                        .WithMany("TagDistributions")
                        .HasForeignKey("IdTag")
                        .HasConstraintName("R_4")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdMetadataNavigation");

                    b.Navigation("IdTagNavigation");
                });

            modelBuilder.Entity("How2CSS.Core.Models.TaskDistribution", b =>
                {
                    b.HasOne("How2CSS.Core.Models.Level", "IdLevelNavigation")
                        .WithMany("TaskDistributions")
                        .HasForeignKey("IdLevel")
                        .HasConstraintName("R_12")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("How2CSS.Core.Models.CSSTask", "IdTaskNavigation")
                        .WithMany("TaskDistributions")
                        .HasForeignKey("IdTask")
                        .HasConstraintName("R_13")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdLevelNavigation");

                    b.Navigation("IdTaskNavigation");
                });

            modelBuilder.Entity("How2CSS.Core.Models.TaskResult", b =>
                {
                    b.HasOne("How2CSS.Core.Models.CSSTask", "IdTaskNavigation")
                        .WithMany("TaskResults")
                        .HasForeignKey("IdTask")
                        .HasConstraintName("R_14")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("How2CSS.Core.Models.User", "IdUserNavigation")
                        .WithMany("TaskResults")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("R_15")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdTaskNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("How2CSS.Core.Models.UnitDistribution", b =>
                {
                    b.HasOne("How2CSS.Core.Models.Metadata", "IdMetadataNavigation")
                        .WithMany("UnitDistributions")
                        .HasForeignKey("IdMetadata")
                        .HasConstraintName("R_7")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("How2CSS.Core.Models.Unit", "IdUnitNavigation")
                        .WithMany("UnitDistributions")
                        .HasForeignKey("IdUnit")
                        .HasConstraintName("R_6")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdMetadataNavigation");

                    b.Navigation("IdUnitNavigation");
                });

            modelBuilder.Entity("How2CSS.Core.Models.UserAchievement", b =>
                {
                    b.HasOne("How2CSS.Core.Models.Level", "IdLevelNavigation")
                        .WithMany("UserAchievements")
                        .HasForeignKey("IdLevel")
                        .HasConstraintName("R_3")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("How2CSS.Core.Models.User", "IdUserNavigation")
                        .WithMany("UserAchievements")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("R_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdLevelNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("How2CSS.Core.Models.Answer", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("How2CSS.Core.Models.CSSTask", b =>
                {
                    b.Navigation("Hints");

                    b.Navigation("TaskDistributions");

                    b.Navigation("TaskResults");
                });

            modelBuilder.Entity("How2CSS.Core.Models.Level", b =>
                {
                    b.Navigation("TaskDistributions");

                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("How2CSS.Core.Models.Metadata", b =>
                {
                    b.Navigation("TagDistributions");

                    b.Navigation("Tasks");

                    b.Navigation("UnitDistributions");
                });

            modelBuilder.Entity("How2CSS.Core.Models.Question", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("How2CSS.Core.Models.Tag", b =>
                {
                    b.Navigation("TagDistributions");
                });

            modelBuilder.Entity("How2CSS.Core.Models.Unit", b =>
                {
                    b.Navigation("UnitDistributions");
                });

            modelBuilder.Entity("How2CSS.Core.Models.User", b =>
                {
                    b.Navigation("TaskResults");

                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("How2CSS.Core.Models.UserAchievement", b =>
                {
                    b.Navigation("AchievementDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
